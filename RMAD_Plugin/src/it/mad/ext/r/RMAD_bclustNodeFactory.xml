<?xml version="1.0" encoding="UTF-8"?>
<knimeNode icon="./default.png" type="Manipulator" xmlns="http://knime.org/node/v2.8" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://knime.org/node/v2.8 http://knime.org/node/v2.8.xsd">
    <name>Bayesian Agglomerative Clustering</name>
    
    <shortDescription>
        The function clusters data saved in a matrix using an additive linear model with disappearing random effects. The model has built-in spike-and-slab components which quantifies important variables for clustering and can be extracted using the imp function.
    </shortDescription>
    
    <fullDescription>
        <intro>
        The function clusters data saved in a matrix using an additive linear model with disappearing random effects. The model has built-in spike-and-slab components which quantifies important variables for clustering and can be extracted using the imp function.
        <br/>
		<br/>
		More details about package "bclust" and "Bayesian agglomerative clustering"("bclust"):
		<br/>
		<a href="http://cran.r-project.org/web/packages/bclust/bclust.pdf">bclust</a> 
        <br/>
        <br/>
		More details about R:
		<br/>
		<a href="http://www.r-project.org/">http://www.r-project.org/</a>
		<br/>
		<a href="http://cran.r-project.org/doc/contrib/Short-refcard.pdf">Short-refcard.pdf</a>
		</intro>
        
        <option name="Filter">Filtering of data matrix or data frame. Each row must correspond to an observation, and each column must correspond to a variable. All variables must be numeric. Missing values (NAs) are allowed.</option>
        <option name="Distribution Family">Distribution family of the disappearing random components. The choices are "gaussian" or "alaplace" allowing Gaussian or asymmetric Laplace family, respectively.</option>  
        <option name="Variable selection">A logical value, TRUE for fitting models that define spike-and-slab distribution in variable level and allows Bayesian variable selection.</option>
        <option name="Method">Optimization method for obtaining the values of the clustering parameters.The default method is an implementation of that of Nelder and Mead (1965), that uses only function values and is robust but relatively slow. It will work reasonably well for non-differentiable functions.<br/>Method "BFGS" is a quasi-Newton method (also known as a variable metric algorithm), specifically that published simultaneously in 1970 by Broyden, Fletcher, Goldfarb and Shanno. This uses function values and gradients to build up a picture of the surface to be optimized.<br/>Method "CG" is a conjugate gradients method based on that by Fletcher and Reeves (1964) (but with the option of Polak–Ribiere or Beale–Sorenson updates). Conjugate gradient methods will generally be more fragile than the BFGS method, but as they do not store a matrix they may be successful in much larger optimization problems.<br/>Method "L-BFGS-B" is that of Byrd et. al. (1995) which allows box constraints, that is each variable can be given a lower and/or upper bound. The initial value must satisfy the constraints. This uses a limited-memory modification of the BFGS quasi-Newton method. If non-trivial bounds are supplied, this method will be selected, with a warning.<br/>Nocedal and Wright (1999) is a comprehensive reference for the previous three methods.<br/>Method "SANN" is by default a variant of simulated annealing given in Belisle (1992). Simulated-annealing belongs to the class of stochastic global optimization methods. It uses only function values but is relatively slow. It will also work for non-differentiable functions. This implementation uses the Metropolis function for the acceptance probability. By default the next candidate point is generated from a Gaussian Markov kernel with scale proportional to the actual temperature. If a function to generate a new candidate point is given, method "SANN" can also be used to solve combinatorial optimization problems. Temperatures are decreased according to the logarithmic cooling schedule as given in Belisle (1992, p. 890); specifically, the temperature is set to temp / log(((t-1) %/% tmax)*tmax + exp(1)), where t is the current iteration step and temp and tmax are specifiable via control, see below. Note that the "SANN" method depends critically on the settings of the control parameters. It is not a general-purpose method but can be very useful in getting to a good value on a very rough surface.</option>
        	
    </fullDescription>
    
    <ports>
        <inPort index="0" name="Data input">Data input</inPort>
        <outPort index="0" name="Data output">R MAD Result Data</outPort>
    </ports>    
    <views>
        <view index="0" name="R MAD Std Output">The text sent to standard out during the execution of R executable as well as the text of the .Rout file generated by R.</view>
        <view index="1" name="R MAD Err Output">The text sent to standard error during the execution of R executable as well as the text of the .Rout file generated by R. (If it appears in gray, it's the output of a previously failing run which is preserved for your trouble shooting.)</view>
    </views>
</knimeNode>